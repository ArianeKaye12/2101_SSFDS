/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontdesksystem;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Products extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    public Products() {
        initComponents();
        connectToDatabase(); // Initialize the connection
        updateCombo(); 
        Fetch();
        ProdPrice.setEditable(false);
    }
    private void connectToDatabase() {
        try {
            // Load and register MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Establish connection to the database
            String url = "jdbc:mysql://localhost:3306/java_user_database"; // Replace with your database URL
            String username = "root"; // Replace with your username if necessary
            String password = ""; // Replace with your password if necessary
            conn = DriverManager.getConnection(url, username, password);
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void updateCombo() {
        String sql = "SELECT * FROM category";
        try {
            // Prepare the query
            pst = conn.prepareStatement(sql);
            
            // Execute the query and get the result
            rs = pst.executeQuery();
            
            // Populate the ComboBox with categories from the database
            while (rs.next()) {
                ProductsComboBox.addItem(rs.getString("CategoryName"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading categories.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources (optional: can be improved with try-with-resources)
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    private void Fetch() {
        try {
            int q;
            pst = conn.prepareStatement("SELECT * FROM product");
            rs = pst.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            q = rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)ProductTable.getModel();
            df.setRowCount(0);
            while (rs.next()){
                Vector v2= new Vector();
                for(int a=1; a<=q; a++){
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("pname"));
                    v2.add(rs.getString("category"));
                    v2.add(rs.getBigDecimal("price"));
                    v2.add(rs.getInt("quantity"));
                    
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductsComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ProdName = new javax.swing.JTextField();
        ProdQty = new javax.swing.JTextField();
        ProductsCLEAR = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        ProdutsADD = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BillTxt = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        ProdPrice = new javax.swing.JTextField();
        ProdFilter = new javax.swing.JButton();
        GrandTotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        DELETE = new javax.swing.JButton();
        SEARCH = new javax.swing.JButton();
        UPDATE = new javax.swing.JButton();
        Addtopaymnet = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Name");

        jLabel3.setText("Quantity");

        jLabel5.setText("Category");

        ProductsCLEAR.setText("CLEAR");
        ProductsCLEAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsCLEARMouseClicked(evt);
            }
        });

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ProductTable);
        if (ProductTable.getColumnModel().getColumnCount() > 0) {
            ProductTable.getColumnModel().getColumn(2).setResizable(false);
        }

        ProdutsADD.setText("ADD ");
        ProdutsADD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProdutsADDMouseClicked(evt);
            }
        });

        BillTxt.setColumns(20);
        BillTxt.setRows(5);
        jScrollPane1.setViewportView(BillTxt);

        jLabel4.setText("Price");

        ProdPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdPriceActionPerformed(evt);
            }
        });

        ProdFilter.setText("FILTER");
        ProdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdFilterActionPerformed(evt);
            }
        });

        GrandTotal.setText("Grand Total :");

        jLabel1.setText("Grand Total:");

        DELETE.setText("DELETE");
        DELETE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DELETEMouseClicked(evt);
            }
        });

        SEARCH.setText("SEARCH");
        SEARCH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SEARCHMouseClicked(evt);
            }
        });

        UPDATE.setText("UPDATE");
        UPDATE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UPDATEMouseClicked(evt);
            }
        });

        Addtopaymnet.setText("Add To Payment");
        Addtopaymnet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddtopaymnetMouseClicked(evt);
            }
        });

        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProdPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ProdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ProdutsADD)
                                        .addGap(52, 52, 52))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(DELETE)
                                        .addGap(24, 24, 24)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(ProductsCLEAR))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(SEARCH)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(UPDATE)
                        .addGap(96, 96, 96)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(ProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)
                        .addComponent(ProdFilter)))
                .addGap(0, 105, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(GrandTotal)
                        .addGap(303, 303, 303))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Addtopaymnet)
                        .addGap(341, 341, 341))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProdPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ProductsCLEAR)
                                    .addComponent(ProdutsADD))))
                        .addGap(2, 2, 2)
                        .addComponent(UPDATE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SEARCH)
                            .addComponent(DELETE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdFilter)
                            .addComponent(ProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GrandTotal)
                            .addComponent(jLabel1))))
                .addGap(18, 18, 18)
                .addComponent(Addtopaymnet)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProductsCLEARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsCLEARMouseClicked
        ProdPrice.setText("");
        ProdName.setText("");
        ProdQty.setText("");
        
    }//GEN-LAST:event_ProductsCLEARMouseClicked

    private void ProdutsADDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProdutsADDMouseClicked
     String prodName = ProdName.getText();
    String prodQtyText = ProdQty.getText();
    String prodPriceText = ProdPrice.getText(); 

    // Convert quantity to integer, handle invalid input
    int prodQty = 0;
    try {
        prodQty = Integer.parseInt(prodQtyText);
        if (prodQty <= 0) {
            JOptionPane.showMessageDialog(this, "Product quantity must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convert price to double, handle invalid input
    double productPrice = 0.0;
    try {
        productPrice = Double.parseDouble(prodPriceText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate if the price is valid
    if (productPrice == 0.0) {
        JOptionPane.showMessageDialog(this, "Invalid product price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if product already exists in the database
    try {
        // Prepare SQL query to check if the product name already exists
        pst = conn.prepareStatement("SELECT productname FROM productpurchase WHERE productname = ?");
        pst.setString(1, prodName);  // Set the product name parameter

        ResultSet rs = pst.executeQuery();
        
        // If product name exists in the database, show error
        if (rs.next()) {
            JOptionPane.showMessageDialog(this, "Product name already exists. Please choose a different name.", "Duplicate Product Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve the available quantity of the product from the ProductTable
    try {
        // Prepare SQL query to check the available quantity for the product
        pst = conn.prepareStatement("SELECT quantity FROM product WHERE pname = ?");
        pst.setString(1, prodName);  // Set the product name parameter

        ResultSet rs = pst.executeQuery();
        
        // Check if product exists in the table
        if (rs.next()) {
            int availableQuantity = rs.getInt("quantity");  // Get the available quantity
            
            // Check if the entered quantity exceeds the available quantity
            if (prodQty > availableQuantity) {
                JOptionPane.showMessageDialog(this, "Entered quantity exceeds available stock. Available: " + availableQuantity, "Quantity Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update the product quantity in the ProductTable after the sale
            int newQuantity = availableQuantity - prodQty;

            // Prepare SQL query to update the product quantity
            pst = conn.prepareStatement("UPDATE product SET quantity = ? WHERE pname = ?");
            pst.setInt(1, newQuantity);  // Set the new quantity
            pst.setString(2, prodName);  // Set the product name
            int updatedRows = pst.executeUpdate();  // Execute the update

            if (updatedRows > 0) {
                System.out.println("Product quantity updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Error updating product quantity.", "Database Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        } else {
            // If the product is not found in the database
            JOptionPane.showMessageDialog(this, "Product not found in the database.", "Product Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Calculate total price for this product
    double totalPrice = productPrice * prodQty;

    // Prepare the bill text with the automatically generated Bill ID, Product details, and Total price
    String billText = 
                      "Product Name: " + prodName + "\n" +
                      "Quantity: " + prodQty + "\n" +
                      "Price per Unit: " + productPrice + "\n" +
                      "Total Price: " + totalPrice + "\n\n";

    // Append the bill information to the JTextArea
    BillTxt.append(billText);

    // Now, insert the product purchase record into the 'productpurchase' (or 'pp') table
    try {
        // SQL to insert the purchased product details into the 'productpurchase' table
        String insertQuery = "INSERT INTO productpurchase (productname, quantity, price, total) VALUES (?, ?, ?, ?)";
        pst = conn.prepareStatement(insertQuery);
        pst.setString(1, prodName);
        pst.setInt(2, prodQty);
        pst.setDouble(3, productPrice);
        pst.setDouble(4, totalPrice);

        // Execute the insert statement
        int rowsInserted = pst.executeUpdate();
        if (rowsInserted > 0) {
            System.out.println("Product purchase recorded successfully in productpurchase table.");
        } else {
            JOptionPane.showMessageDialog(this, "Error recording product purchase in productpurchase table.", "Database Error", JOptionPane.ERROR_MESSAGE);
        }

        // Now, insert the same details into the 'pp' table
        String insertQueryPP = "INSERT INTO pp (productname, quantity, price, total) VALUES (?, ?, ?, ?)";
        pst = conn.prepareStatement(insertQueryPP);
        pst.setString(1, prodName);
        pst.setInt(2, prodQty);
        pst.setDouble(3, productPrice);
        pst.setDouble(4, totalPrice);

        // Execute the insert statement for the 'pp' table
        int rowsInsertedPP = pst.executeUpdate();
        if (rowsInsertedPP > 0) {
            System.out.println("Product purchase recorded successfully in pp table.");
        } else {
            JOptionPane.showMessageDialog(this, "Error recording product purchase in pp table.", "Database Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Could not record product purchase.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }

    // Update the Grand Total
    updateGrandTotal();
    }//GEN-LAST:event_ProdutsADDMouseClicked
    private void updateGrandTotal() {
    double grandTotal = 0.0;
    String[] billLines = BillTxt.getText().split("\n");

    // Loop through all lines in BillTxt and sum the total prices
    for (String line : billLines) {
        if (line.startsWith("Total Price: ")) {
            try {
                // Extract the total price from the line
                String totalPriceText = line.split(": ")[1];
                grandTotal += Double.parseDouble(totalPriceText);
            } catch (NumberFormatException e) {
                // Handle invalid format in case something unexpected happens
                JOptionPane.showMessageDialog(this, "Error parsing total price.", "Parse Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Set the Grand Total to the GrandTotal text field
    GrandTotal.setText(String.format("%.2f", grandTotal));
}
    private void ProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTableMouseClicked
        int row = ProductTable.getSelectedRow();

    if (row != -1) {
        String productName = ProductTable.getValueAt(row, 1
        ).toString();
        String productPrice = ProductTable.getValueAt(row, 3
        ).toString();
        ProdName.setText(productName);
        ProdPrice.setText(productPrice);
    }
    }//GEN-LAST:event_ProductTableMouseClicked

    private void ProdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdFilterActionPerformed
        try {
        String selectedCategory = (String) ProductsComboBox.getSelectedItem();

        if (selectedCategory == null || selectedCategory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a category.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String query = "SELECT * FROM product WHERE category = ?";

        pst = conn.prepareStatement(query);
        pst.setString(1, selectedCategory);  
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        int columnCount = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) ProductTable.getModel();


        df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();

            row.add(rs.getString("id"));
            row.add(rs.getString("pname"));
            row.add(rs.getString("category"));
            row.add(rs.getBigDecimal("price"));
            row.add(rs.getInt("quantity"));

            df.addRow(row);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching data from the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_ProdFilterActionPerformed

    private void SEARCHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SEARCHMouseClicked
        String prodName = ProdName.getText();  // Get the product name entered by the user

    if (prodName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a product name to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Prepare SQL query to retrieve the quantity and price based on the product name
        String searchQuery = "SELECT quantity, price FROM productpurchase WHERE productname = ?";
        pst = conn.prepareStatement(searchQuery);
        pst.setString(1, prodName);  // Set the product name parameter
        
        // Execute the query
        ResultSet rs = pst.executeQuery();
        
        // Check if the product is found in the table
        if (rs.next()) {
            int productQuantity = rs.getInt("quantity");  // Retrieve quantity
            double productPrice = rs.getDouble("price");  // Retrieve price
            
            // Display the results in a label or text field (e.g., QuantityTxt, PriceTxt)
            ProdQty.setText(String.valueOf(productQuantity));
            ProdPrice.setText(String.valueOf(productPrice));
            
        } else {
            // If no product is found in the database
            JOptionPane.showMessageDialog(this, "Product not found in the database.", "Search Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_SEARCHMouseClicked

    private void UPDATEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UPDATEMouseClicked
       // Get the product name and updated quantity from the user input
    String prodName = ProdName.getText();  // Get the product name
    String prodQtyText = ProdQty.getText();  // Get the new quantity entered by the user

    // Validate input
    if (prodName.isEmpty() || prodQtyText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both product name and new quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int prodQty = 0;
    try {
        prodQty = Integer.parseInt(prodQtyText);
        if (prodQty <= 0) {
            JOptionPane.showMessageDialog(this, "Product quantity must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve current available quantity from the database
    int availableQuantity = 0;
    try {
        // Prepare SQL query to get the available quantity from the product table (assuming it's stored there)
        pst = conn.prepareStatement("SELECT quantity FROM product WHERE pname = ?");
        pst.setString(1, prodName);  // Set the product name parameter
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            availableQuantity = rs.getInt("quantity");  // Get the available quantity
        } else {
            JOptionPane.showMessageDialog(this, "Product not found in the database.", "Product Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Check if the new quantity exceeds the available quantity
    if (prodQty > availableQuantity) {
        JOptionPane.showMessageDialog(this, "The quantity entered exceeds the available stock. Available stock: " + availableQuantity, "Quantity Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve the current product price from the database
    double productPrice = 0.0;
    try {
        // Prepare SQL query to get the product price from the productpurchase table
        pst = conn.prepareStatement("SELECT price FROM productpurchase WHERE productname = ?");
        pst.setString(1, prodName);  // Set the product name parameter
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            productPrice = rs.getDouble("price");  // Get the price from the result set
        } else {
            JOptionPane.showMessageDialog(this, "Product not found in the database.", "Product Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Recalculate the total price based on updated quantity
    double updatedTotalPrice = productPrice * prodQty;

    // Update the quantity and total price in both productpurchase and pp tables
    try {
        // SQL query to update the quantity and total in the productpurchase table
        String updateQuery = "UPDATE productpurchase SET quantity = ?, total = ? WHERE productname = ?";
        pst = conn.prepareStatement(updateQuery);
        pst.setInt(1, prodQty);  // Set the new quantity
        pst.setDouble(2, updatedTotalPrice);  // Set the updated total price
        pst.setString(3, prodName);  // Set the product name
        int rowsUpdated = pst.executeUpdate();

        if (rowsUpdated > 0) {
            // Also update the quantity and total in the pp table (you might have the same columns in pp)
            String updatePPQuery = "UPDATE pp SET quantity = ?, total = ? WHERE productname = ?";
            pst = conn.prepareStatement(updatePPQuery);
            pst.setInt(1, prodQty);  // Set the new quantity for pp table
            pst.setDouble(2, updatedTotalPrice);  // Set the updated total price for pp table
            pst.setString(3, prodName);  // Set the product name
            pst.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Quantity and total updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error updating quantity in the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Now update the BillTxt text area to reflect the change
    String currentText = BillTxt.getText();
    String[] lines = currentText.split("\n");
    StringBuilder updatedText = new StringBuilder();
    double grandTotal = 0.0;  // Variable to calculate the total price

    // Loop through each line in the BillTxt to find the relevant product entry and update it
    for (int i = 0; i < lines.length; i++) {
        if (lines[i].contains("Product Name: " + prodName)) {
            // Update the quantity in the BillTxt (along with the total price)
            int index = i + 1; // This should be the next line after the "Product Name"
            if (index < lines.length && lines[index].contains("Quantity: ")) {
                // Replace the old quantity with the new quantity in BillTxt
                lines[index] = "Quantity: " + prodQty;
            }

            // Recalculate the total price and update the line in BillTxt
            double newTotalPrice = productPrice * prodQty;
            int totalPriceIndex = i + 3; // Assuming "Total Price: " is on the 4th line
            if (totalPriceIndex < lines.length && lines[totalPriceIndex].contains("Total Price: ")) {
                lines[totalPriceIndex] = "Total Price: " + newTotalPrice;
            }
        }

        // Check if the line contains "Total Price: " and add to the grandTotal
        if (lines[i].contains("Total Price: ")) {
            try {
                String[] parts = lines[i].split(": ");
                double totalPrice = Double.parseDouble(parts[1].trim()); // Get the total price value
                grandTotal += totalPrice; // Add to grand total
            } catch (NumberFormatException e) {
                // Handle any parsing error if needed
            }
        }

        updatedText.append(lines[i]).append("\n");
    }

    // Set the updated content back to the BillTxt text area
    BillTxt.setText(updatedText.toString());

    // Update the GrandTotal text field with the calculated grand total
    GrandTotal.setText(String.format("%.2f", grandTotal));
    }//GEN-LAST:event_UPDATEMouseClicked

    private void ProdPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdPriceActionPerformed
        ProdPrice.setEditable(false);
    }//GEN-LAST:event_ProdPriceActionPerformed

    private void DELETEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DELETEMouseClicked
        // Get the product name from the user input (assuming ProdName is a text field)
    String prodNameToDelete = ProdName.getText();  // Get the name of the product to delete

    if (prodNameToDelete.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the product name to delete.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Delete the data from both productpurchase and pp tables
    try {
        // Start a transaction to ensure data consistency
        conn.setAutoCommit(false); // Disable auto-commit for transaction control
        
        // SQL to delete the product from the productpurchase table
        String deleteProductPurchaseSQL = "DELETE FROM productpurchase WHERE productname = ?";
        pst = conn.prepareStatement(deleteProductPurchaseSQL);
        pst.setString(1, prodNameToDelete);
        int rowsDeletedFromProductPurchase = pst.executeUpdate();
        
        // SQL to delete the product from the pp table
        String deletePPSQL = "DELETE FROM pp WHERE productname = ?";
        pst = conn.prepareStatement(deletePPSQL);
        pst.setString(1, prodNameToDelete);
        int rowsDeletedFromPP = pst.executeUpdate();

        // Check if any row was deleted from both tables
        if (rowsDeletedFromProductPurchase > 0 && rowsDeletedFromPP > 0) {
            // If successful in deleting from both tables, commit the transaction
            conn.commit();
            JOptionPane.showMessageDialog(this, "Product deleted successfully from both tables.", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Now, remove the product from the JTextArea BillTxt
            String currentText = BillTxt.getText();
            String[] billLines = currentText.split("\n");
            StringBuilder updatedText = new StringBuilder();

            // Loop through each line and append to updatedText except the ones related to the deleted product
            boolean productDeleted = false;
            boolean billIdDeleted = false;
            
            for (int i = 0; i < billLines.length; i++) {
                // Check if the line contains the product name (and potentially other related information)
                if (billLines[i].contains("Product Name: " + prodNameToDelete)) {
                    // Skip this product and the associated lines (Bill Id, Quantity, Price, and Total)
                    productDeleted = true;
                    billIdDeleted = true; // Flag to indicate Bill Id is also deleted
                }
                
                // If we haven't skipped all the lines of this product, we append them to updatedText
                if (!productDeleted) {
                    updatedText.append(billLines[i]).append("\n");
                } else if (billIdDeleted && !billLines[i].contains("Product Name: ")) {
                    // If Bill Id has been deleted, skip it as well
                    billIdDeleted = false;  // Only delete Bill Id once
                    continue;
                } else if (billLines[i].contains("Total Price: ") && productDeleted) {
                    // Once we encounter the "Total Price" line of the product, we stop deleting the related lines
                    productDeleted = false;
                }
            }

            // Set the updated content back to BillTxt
            BillTxt.setText(updatedText.toString());

            // Update GrandTotal after deletion
            updateTotal();  // Call a method to recalculate and update the GrandTotal

        } else {
            // If no records were deleted from the tables
            JOptionPane.showMessageDialog(this, "No matching product found to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException ex) {
        try {
            conn.rollback(); // Rollback the transaction in case of any error
            JOptionPane.showMessageDialog(this, "Error deleting product: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException rollbackEx) {
            JOptionPane.showMessageDialog(this, "Error rolling back transaction: " + rollbackEx.getMessage(), "Transaction Error", JOptionPane.ERROR_MESSAGE);
        }
    } finally {
        try {
            conn.setAutoCommit(true); // Re-enable auto-commit after the transaction
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error re-enabling auto-commit: " + e.getMessage(), "Transaction Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Clear the ProdName field after deletion
    ProdName.setText("");
}

// Method to update GrandTotal based on the remaining BillTxt content
private void updateTotal() {
    String currentText = BillTxt.getText();
    String[] lines = currentText.split("\n");
    double grandTotal = 0.0;

    // Loop through the BillTxt lines and sum all total prices
    for (String line : lines) {
        if (line.contains("Total Price: ")) {
            try {
                String[] parts = line.split(": ");
                double totalPrice = Double.parseDouble(parts[1].trim()); // Get the total price value
                grandTotal += totalPrice; // Add to grand total
            } catch (NumberFormatException e) {
                // Handle any parsing error if needed
            }
        }
    }

    // Update the GrandTotal text field
    GrandTotal.setText(String.format("%.2f", grandTotal));
    }//GEN-LAST:event_DELETEMouseClicked

    private void AddtopaymnetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddtopaymnetMouseClicked
       // Display a confirmation dialog to ask if the user is sure they want to proceed
    int response = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to buy these products?", 
        "Confirm Purchase", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.QUESTION_MESSAGE);

    // If the user clicks 'Yes' (response == JOptionPane.YES_OPTION)
    if (response == JOptionPane.YES_OPTION) {
        // Proceed with opening the User JFrame
        User us = new User();
        us.setVisible(true);  // Show the User JFrame
        us.pack();  // Adjust size
        us.setLocationRelativeTo(null);  // Center the window
        us.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Close the application when the User JFrame is closed

        // Dispose of the current (this) JFrame to navigate away
        this.dispose();
    }
    }//GEN-LAST:event_AddtopaymnetMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int close = JOptionPane.showConfirmDialog(null, "Are you sure you want to go back to the MAIN MENU?", "Confirmation Box", JOptionPane.YES_NO_OPTION);
    
        if (close == JOptionPane.YES_OPTION) {
            User prod = new User();
            prod.setVisible(true);
            prod.pack();
            prod.setLocationRelativeTo(null);
            prod.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addtopaymnet;
    private javax.swing.JTextArea BillTxt;
    private javax.swing.JButton DELETE;
    private javax.swing.JLabel GrandTotal;
    private javax.swing.JButton ProdFilter;
    private javax.swing.JTextField ProdName;
    private javax.swing.JTextField ProdPrice;
    private javax.swing.JTextField ProdQty;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton ProductsCLEAR;
    private javax.swing.JComboBox<String> ProductsComboBox;
    private javax.swing.JButton ProdutsADD;
    private javax.swing.JButton SEARCH;
    private javax.swing.JButton UPDATE;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
