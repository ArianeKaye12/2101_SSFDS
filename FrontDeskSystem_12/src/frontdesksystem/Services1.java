/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontdesksystem;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;


/**
 *
 * @author User PC
 */
public class Services1 extends javax.swing.JFrame {

    /**
     * Creates new form SpaServices
     */
    public Services1() {
        initComponents();
        connectToDatabase();
        updateCombo();

    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    private void connectToDatabase() {
        try {
            // Load and register MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Establish connection to the database
            String url = "jdbc:mysql://localhost:3306/java_user_database"; // Replace with your database URL
            String username = "root"; // Replace with your username if necessary
            String password = ""; // Replace with your password if necessary
            con = DriverManager.getConnection(url, username, password);
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void updateCombo() {
    String sql = "SELECT * FROM services";
    Set<String> addedServices = new HashSet<>();  // Use a Set to store services and prevent duplicates
    
    try {
        pst = con.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Loop through the result set and add unique ServicesName to the combo box
        while (rs.next()) {
            String service = rs.getString("ServicesName");
            
            // Check if the service has already been added (using the Set to check for duplicates)
            if (!addedServices.contains(service)) {
                SpaComboBox.addItem(service);  // Add the service name to the combo box
                addedServices.add(service);  // Mark the service as added
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading categories.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


    
 
// Helper method to check if a service name already exists in the combo box
private boolean isServiceNameInComboBox(String serviceName) {
    for (int i = 0; i < SpaComboBox.getItemCount(); i++) {
        if (SpaComboBox.getItemAt(i).equals(serviceName)) {
            return true; // Return true if the service name is already in the combo box
        }
    }
    return false; // Return false if the service name is not in the combo box
}
    // Assuming you have a JComboBox named jComboBoxCat for selecting categories
// And a JTable named ServicesTable to display the services



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        SpaComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServicesTable = new javax.swing.JTable();
        Fillter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ServiceName = new javax.swing.JTextField();
        ServicePrice = new javax.swing.JTextField();
        ADDService = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ServicesTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        Payment = new javax.swing.JButton();
        avail = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        getContentPane().add(SpaComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 240, 30));

        ServicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ServicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ServicesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ServicesTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 362, 141));

        Fillter.setText("Filter");
        Fillter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillterActionPerformed(evt);
            }
        });
        getContentPane().add(Fillter, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 50, -1, -1));

        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, -1));

        jLabel3.setText("Price");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, -1));
        getContentPane().add(ServiceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 144, 31));
        getContentPane().add(ServicePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 280, 144, 30));

        ADDService.setText("ADD");
        ADDService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ADDServiceMouseClicked(evt);
            }
        });
        getContentPane().add(ADDService, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 260, -1, 24));

        ServicesTextArea.setColumns(20);
        ServicesTextArea.setRows(5);
        jScrollPane2.setViewportView(ServicesTextArea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 530, 330));

        jLabel5.setText("Kind of Service");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        Total.setText("Total :");
        getContentPane().add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 380, 40, 40));

        Payment.setText("Add to Payment");
        Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaymentActionPerformed(evt);
            }
        });
        getContentPane().add(Payment, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 450, -1, -1));

        avail.setText("Avail This Services");
        avail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availMouseClicked(evt);
            }
        });
        getContentPane().add(avail, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 450, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FillterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillterActionPerformed
        try {
        String selectedCategory = (String)SpaComboBox.getSelectedItem();

        if (selectedCategory == null || selectedCategory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a category.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String query = "SELECT * FROM services WHERE ServicesName = ?";

        pst = con.prepareStatement(query);
        pst.setString(1, selectedCategory);  
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        int columnCount = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) ServicesTable.getModel();


        df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();

            row.add(rs.getString("Name"));
            row.add(rs.getBigDecimal("Price"));
           

            df.addRow(row);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching data from the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }                           
    }//GEN-LAST:event_FillterActionPerformed

    private void ServicesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ServicesTableMouseClicked
        int row = ServicesTable.getSelectedRow();
    if (row != -1) {
        String productName = ServicesTable.getValueAt(row, 0).toString();
        String productPrice = ServicesTable.getValueAt(row, 1).toString();
        ServiceName.setText(productName);
        ServicePrice.setText(productPrice);
    }
    }//GEN-LAST:event_ServicesTableMouseClicked
    double totalAmount = 0.0;
    private void ADDServiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ADDServiceMouseClicked
        // Get the name and price from the text fields
    String serviceName = ServiceName.getText();  // Assuming ServiceName is the text field for service name
    String servicePriceText = ServicePrice.getText();  // Assuming ServicePrice is the text field for service price
    
    // Validate the input
    if (serviceName.isEmpty() || servicePriceText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both service name and price.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Convert the price to a double
    double servicePrice;
    try {
        servicePrice = Double.parseDouble(servicePriceText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Create the service details text
    String serviceDetails = "Service Name: " + serviceName + "\n" +
                            "Service Price: " + servicePrice + "\n\n";
    
    // Append the service details to the ServicesTextArea
    ServicesTextArea.append(serviceDetails);
    
    // Add the service price to the total amount
    totalAmount += servicePrice;

    // Update the Total text field with the running total
    Total.setText("Total: " + totalAmount);  // Assuming Total is the text field for the total amount
    
    // Optional: Clear the text fields after adding
    ServiceName.setText("");  
    ServicePrice.setText("");
    }//GEN-LAST:event_ADDServiceMouseClicked

    private void PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaymentActionPerformed
       // Get the content from ServicesTextArea
    String billContent = ServicesTextArea.getText();

    // Split the content into lines
    String[] billLines = billContent.split("\n");

    try {
        // Initialize temporary variables to store service name and price
        String currentServiceName = null;
        Double currentServicePrice = null;

        // Iterate over each line and extract the relevant data (service name, price)
        for (String line : billLines) {
            // Check for lines that start with "Service Name:"
            if (line.startsWith("Service Name:")) {
                // Extract the service name from the line
                currentServiceName = line.split(":")[1].trim();  // Extracting service name
            }

            // Check for lines that start with "Service Price:" after the service name has been found
            if (line.startsWith("Service Price:") && currentServiceName != null) {
                // Extract the service price from the line
                String priceText = line.split(":")[1].trim();  // Extracting service price
                
                // Parse the service price
                try {
                    currentServicePrice = Double.parseDouble(priceText);  // Parse the price value
                    
                    // Now insert the service name and price into the database
                    String sql = "INSERT INTO availservices (servicename, serviceprice) VALUES (?, ?)";
                    
                    // Prepare the PreparedStatement
                    pst = con.prepareStatement(sql);
                    pst.setString(1, currentServiceName); // Set service name
                    pst.setDouble(2, currentServicePrice); // Set service price

                    // Execute the SQL query to insert the data
                    pst.executeUpdate();

                    // Reset the variables for the next service
                    currentServiceName = null;
                    currentServicePrice = null;

                } catch (NumberFormatException e) {
                    // Handle any exception when parsing the price
                    JOptionPane.showMessageDialog(this, "Error parsing price: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the loop if there's an error
                }
            }
        }

        // Show success message after saving
        JOptionPane.showMessageDialog(this, "Payment details saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

    } catch (SQLException e) {
        // Handle any SQL exceptions
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving payment details to database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        // Handle any other exceptions
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error processing the bill data.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_PaymentActionPerformed

    private void availMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availMouseClicked
        InfotoAvail ita = new InfotoAvail();
        ita.setVisible(true);
        ita.pack();
        ita.setLocationRelativeTo(null);
        ita.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_availMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Services1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Services1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Services1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Services1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Services1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDService;
    private javax.swing.JButton Fillter;
    private javax.swing.JButton Payment;
    private javax.swing.JTextField ServiceName;
    private javax.swing.JTextField ServicePrice;
    private javax.swing.JTable ServicesTable;
    private javax.swing.JTextArea ServicesTextArea;
    private javax.swing.JComboBox<String> SpaComboBox;
    private javax.swing.JLabel Total;
    private javax.swing.JButton avail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
