/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontdesksystem;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Products extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    public Products() {
        initComponents();
        connectToDatabase(); // Initialize the connection
        updateCombo(); 
        Fetch();
    }
    private void connectToDatabase() {
        try {
            // Load and register MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Establish connection to the database
            String url = "jdbc:mysql://localhost:3306/java_user_database"; // Replace with your database URL
            String username = "root"; // Replace with your username if necessary
            String password = ""; // Replace with your password if necessary
            conn = DriverManager.getConnection(url, username, password);
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void updateCombo() {
        String sql = "SELECT * FROM category";
        try {
            // Prepare the query
            pst = conn.prepareStatement(sql);
            
            // Execute the query and get the result
            rs = pst.executeQuery();
            
            // Populate the ComboBox with categories from the database
            while (rs.next()) {
                ProductsComboBox.addItem(rs.getString("CategoryName"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading categories.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Close resources (optional: can be improved with try-with-resources)
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    private void Fetch() {
        try {
            int q;
            pst = conn.prepareStatement("SELECT * FROM product");
            rs = pst.executeQuery();
            ResultSetMetaData rss = rs.getMetaData();
            q = rss.getColumnCount();
            DefaultTableModel df = (DefaultTableModel)ProductTable.getModel();
            df.setRowCount(0);
            while (rs.next()){
                Vector v2= new Vector();
                for(int a=1; a<=q; a++){
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("pname"));
                    v2.add(rs.getString("category"));
                    v2.add(rs.getBigDecimal("price"));
                    v2.add(rs.getInt("quantity"));
                    
                }
                df.addRow(v2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ProductsComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ProdName = new javax.swing.JTextField();
        ProdQty = new javax.swing.JTextField();
        ProductsCLEAR = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        ProdutsADD = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BillTxt = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        ProdPrice = new javax.swing.JTextField();
        ProdFilter = new javax.swing.JButton();
        GrandTotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ADDPAYMENT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Name");

        jLabel3.setText("Quantity");

        jLabel5.setText("Category");

        ProductsCLEAR.setText("CLEAR");
        ProductsCLEAR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsCLEARMouseClicked(evt);
            }
        });

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Category", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ProductTable);
        if (ProductTable.getColumnModel().getColumnCount() > 0) {
            ProductTable.getColumnModel().getColumn(2).setResizable(false);
        }

        ProdutsADD.setText("ADD TO BILL");
        ProdutsADD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProdutsADDMouseClicked(evt);
            }
        });

        BillTxt.setColumns(20);
        BillTxt.setRows(5);
        jScrollPane1.setViewportView(BillTxt);

        jLabel4.setText("Price");

        ProdFilter.setText("FILTER");
        ProdFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProdFilterActionPerformed(evt);
            }
        });

        GrandTotal.setText("Grand Total :");

        jLabel1.setText("Grand Total:");

        ADDPAYMENT.setText("Add to Payment");
        ADDPAYMENT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ADDPAYMENTMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ProdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ProdPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(ProdutsADD)
                        .addGap(18, 18, 18)
                        .addComponent(ProductsCLEAR)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ProdFilter))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2)))
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(GrandTotal)
                        .addGap(203, 203, 203))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ADDPAYMENT)
                        .addGap(219, 219, 219))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(ProdFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProdQty, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(ProdPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ProductsCLEAR)
                            .addComponent(ProdutsADD))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GrandTotal)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ADDPAYMENT)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProductsCLEARMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsCLEARMouseClicked
        ProdPrice.setText("");
        ProdName.setText("");
        ProdQty.setText("");
        
    }//GEN-LAST:event_ProductsCLEARMouseClicked

    private void ProdutsADDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProdutsADDMouseClicked
        String billId = "BILL" + System.currentTimeMillis();  // Generates a unique Bill ID based on the current time
    String prodName = ProdName.getText();
    String prodQtyText = ProdQty.getText();
    String prodPriceText = ProdPrice.getText(); 

    // Convert quantity to integer, handle invalid input
    int prodQty = 0;
    try {
        prodQty = Integer.parseInt(prodQtyText);
        if (prodQty <= 0) {
            JOptionPane.showMessageDialog(this, "Product quantity must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convert price to double, handle invalid input
    double productPrice = 0.0;
    try {
        productPrice = Double.parseDouble(prodPriceText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate if the price is valid
    if (productPrice == 0.0) {
        JOptionPane.showMessageDialog(this, "Invalid product price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve the available quantity of the product from the ProductTable
    try {
        // Prepare SQL query to check the available quantity for the product
        pst = conn.prepareStatement("SELECT quantity FROM product WHERE pname = ?");
        pst.setString(1, prodName);  // Set the product name parameter

        ResultSet rs = pst.executeQuery();
        
        // Check if product exists in the table
        if (rs.next()) {
            int availableQuantity = rs.getInt("quantity");  // Get the available quantity
            
            // Check if the entered quantity exceeds the available quantity
            if (prodQty > availableQuantity) {
                JOptionPane.showMessageDialog(this, "Entered quantity exceeds available stock. Available: " + availableQuantity, "Quantity Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update the product quantity in the ProductTable after the sale
            int newQuantity = availableQuantity - prodQty;

            // Prepare SQL query to update the product quantity
            pst = conn.prepareStatement("UPDATE product SET quantity = ? WHERE pname = ?");
            pst.setInt(1, newQuantity);  // Set the new quantity
            pst.setString(2, prodName);  // Set the product name
            int updatedRows = pst.executeUpdate();  // Execute the update

            if (updatedRows > 0) {
                System.out.println("Product quantity updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Error updating product quantity.", "Database Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        } else {
            // If the product is not found in the database
            JOptionPane.showMessageDialog(this, "Product not found in the database.", "Product Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Database error. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Calculate total price for this product
    double totalPrice = productPrice * prodQty;

    // Prepare the bill text with the automatically generated Bill ID, Product details, and Total price
    String billText = "Bill ID: " + billId + "\n" +
                      "Product Name: " + prodName + "\n" +
                      "Quantity: " + prodQty + "\n" +
                      "Price per Unit: " + productPrice + "\n" +
                      "Total Price: " + totalPrice + "\n\n";

    // Append the bill information to the JTextArea
    BillTxt.append(billText);

    // Update the Grand Total
    updateGrandTotal();
    }//GEN-LAST:event_ProdutsADDMouseClicked
    private void updateGrandTotal() {
    double grandTotal = 0.0;
    String[] billLines = BillTxt.getText().split("\n");

    // Loop through all lines in BillTxt and sum the total prices
    for (String line : billLines) {
        if (line.startsWith("Total Price: ")) {
            try {
                // Extract the total price from the line
                String totalPriceText = line.split(": ")[1];
                grandTotal += Double.parseDouble(totalPriceText);
            } catch (NumberFormatException e) {
                // Handle invalid format in case something unexpected happens
                JOptionPane.showMessageDialog(this, "Error parsing total price.", "Parse Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Set the Grand Total to the GrandTotal text field
    GrandTotal.setText(String.format("%.2f", grandTotal));
}
    private void ProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTableMouseClicked
        int row = ProductTable.getSelectedRow();

    if (row != -1) {
        String productName = ProductTable.getValueAt(row, 1
        ).toString();
        String productPrice = ProductTable.getValueAt(row, 3
        ).toString();
        ProdName.setText(productName);
        ProdPrice.setText(productPrice);
    }
    }//GEN-LAST:event_ProductTableMouseClicked

    private void ProdFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProdFilterActionPerformed
        try {
        String selectedCategory = (String) ProductsComboBox.getSelectedItem();

        if (selectedCategory == null || selectedCategory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a category.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String query = "SELECT * FROM product WHERE category = ?";

        pst = conn.prepareStatement(query);
        pst.setString(1, selectedCategory);  
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        int columnCount = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) ProductTable.getModel();


        df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();

            row.add(rs.getString("id"));
            row.add(rs.getString("pname"));
            row.add(rs.getString("category"));
            row.add(rs.getBigDecimal("price"));
            row.add(rs.getInt("quantity"));

            df.addRow(row);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching data from the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_ProdFilterActionPerformed

    private void ADDPAYMENTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ADDPAYMENTMouseClicked
        // Get the content from BillTxt JTextArea
    String billContent = BillTxt.getText();
    
    // Split the content into lines
    String[] billLines = billContent.split("\n");

    // Iterate over each line and extract the relevant data (name, quantity, price, total)
    try {
        for (String line : billLines) {
            // Example: Extracting lines that contain "Product Name", "Quantity", etc.
            if (line.startsWith("Product Name:")) {
                String prodName = line.split(":")[1].trim();
                String prodQtyLine = billContent.split("Quantity:")[1].split("\n")[0];
                String prodPriceLine = billContent.split("Price per Unit:")[1].split("\n")[0];
                String totalLine = billContent.split("Total Price:")[1].split("\n")[0];
                
                // Extract quantity, price, and total values
                int prodQty = Integer.parseInt(prodQtyLine.trim());
                double prodPrice = Double.parseDouble(prodPriceLine.trim());
                double totalPrice = Double.parseDouble(totalLine.trim());

                // Prepare SQL query to insert the data into productpurchase table
                String sql = "INSERT INTO productpurchase (productname, quantity, price, total) VALUES (?, ?, ?, ?)";
                
                // Prepare the PreparedStatement
                pst = conn.prepareStatement(sql);
                pst.setString(1, prodName);  // Set the product name
                pst.setInt(2, prodQty);  // Set the product quantity
                pst.setDouble(3, prodPrice);  // Set the product price
                pst.setDouble(4, totalPrice);  // Set the total price

                // Execute the SQL query to insert the data
                pst.executeUpdate();
            }
        }
        // Show success message after saving
        JOptionPane.showMessageDialog(this, "Payment details saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (SQLException e) {
        // Handle any SQL exceptions
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving payment details to database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        // Handle any other exceptions
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error processing the bill data.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_ADDPAYMENTMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDPAYMENT;
    private javax.swing.JTextArea BillTxt;
    private javax.swing.JLabel GrandTotal;
    private javax.swing.JButton ProdFilter;
    private javax.swing.JTextField ProdName;
    private javax.swing.JTextField ProdPrice;
    private javax.swing.JTextField ProdQty;
    private javax.swing.JTable ProductTable;
    private javax.swing.JButton ProductsCLEAR;
    private javax.swing.JComboBox<String> ProductsComboBox;
    private javax.swing.JButton ProdutsADD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
