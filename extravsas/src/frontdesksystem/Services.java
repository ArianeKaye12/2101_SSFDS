/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontdesksystem;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;


/**
 *
 * @author User PC
 */
public class Services extends javax.swing.JFrame {

    /**
     * Creates new form SpaServices
     */
    public Services() {
        initComponents();
        connectToDatabase();
        updateCombo();
        ServicePrice.setEditable(false);

    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    private void connectToDatabase() {
        try {
            // Load and register MySQL JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Establish connection to the database
            String url = "jdbc:mysql://localhost:3306/java_user_database"; // Replace with your database URL
            String username = "root"; // Replace with your username if necessary
            String password = ""; // Replace with your password if necessary
            con = DriverManager.getConnection(url, username, password);
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void updateCombo() {
    String sql = "SELECT * FROM position";
    Set<String> addedServices = new HashSet<>();  // Use a Set to store services and prevent duplicates
    
    try {
        pst = con.prepareStatement(sql);
        rs = pst.executeQuery();
        
        // Loop through the result set and add unique ServicesName to the combo box
        while (rs.next()) {
            String service = rs.getString("PositionName");
            
            // Check if the service has already been added (using the Set to check for duplicates)
            if (!addedServices.contains(service)) {
                SpaComboBox.addItem(service);  // Add the service name to the combo box
                addedServices.add(service);  // Mark the service as added
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading categories.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


    
 
// Helper method to check if a service name already exists in the combo box
private boolean isServiceNameInComboBox(String serviceName) {
    for (int i = 0; i < SpaComboBox.getItemCount(); i++) {
        if (SpaComboBox.getItemAt(i).equals(serviceName)) {
            return true; // Return true if the service name is already in the combo box
        }
    }
    return false; // Return false if the service name is not in the combo box
}
    // Assuming you have a JComboBox named jComboBoxCat for selecting categories
// And a JTable named ServicesTable to display the services



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        SpaComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServicesTable = new javax.swing.JTable();
        Fillter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ServiceName = new javax.swing.JTextField();
        ServicePrice = new javax.swing.JTextField();
        Add = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ServicesTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        Total = new javax.swing.JLabel();
        avail = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        AssistFilter = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AssistTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        EmployeeName = new javax.swing.JTextField();
        Time = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1370, 731));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SpaComboBox.setBackground(new java.awt.Color(51, 0, 0));
        SpaComboBox.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        SpaComboBox.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(SpaComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 240, 30));

        ServicesTable.setBackground(new java.awt.Color(51, 0, 0));
        ServicesTable.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        ServicesTable.setForeground(new java.awt.Color(255, 255, 255));
        ServicesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ServicesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ServicesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ServicesTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 480, 130));

        Fillter.setBackground(new java.awt.Color(102, 0, 0));
        Fillter.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Fillter.setForeground(new java.awt.Color(255, 255, 255));
        Fillter.setText("Filter");
        Fillter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillterActionPerformed(evt);
            }
        });
        getContentPane().add(Fillter, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 120, -1, 30));

        jLabel2.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Name");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 50, 30));

        jLabel3.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Price");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 50, 30));

        ServiceName.setBackground(new java.awt.Color(51, 0, 0));
        ServiceName.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        ServiceName.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(ServiceName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 300, 310, 31));

        ServicePrice.setBackground(new java.awt.Color(51, 0, 0));
        ServicePrice.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        ServicePrice.setForeground(new java.awt.Color(255, 255, 255));
        ServicePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServicePriceActionPerformed(evt);
            }
        });
        getContentPane().add(ServicePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 340, 310, 30));

        Add.setBackground(new java.awt.Color(102, 0, 0));
        Add.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Add.setForeground(new java.awt.Color(255, 255, 255));
        Add.setText("ADD");
        Add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddMouseClicked(evt);
            }
        });
        getContentPane().add(Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 380, -1, 24));

        ServicesTextArea.setBackground(new java.awt.Color(51, 0, 0));
        ServicesTextArea.setColumns(20);
        ServicesTextArea.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        ServicesTextArea.setForeground(new java.awt.Color(255, 255, 255));
        ServicesTextArea.setRows(5);
        jScrollPane2.setViewportView(ServicesTextArea);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 70, 530, 510));

        jLabel5.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Kind of Service");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, -1, 30));

        Total.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Total.setForeground(new java.awt.Color(255, 255, 255));
        Total.setText("Total :");
        getContentPane().add(Total, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 590, 150, 40));

        avail.setBackground(new java.awt.Color(102, 0, 0));
        avail.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        avail.setForeground(new java.awt.Color(255, 255, 255));
        avail.setText("Avail This Services");
        avail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                availMouseClicked(evt);
            }
        });
        getContentPane().add(avail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 640, -1, -1));

        Delete.setBackground(new java.awt.Color(102, 0, 0));
        Delete.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("DELETE");
        Delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteMouseClicked(evt);
            }
        });
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 380, -1, -1));

        Search.setBackground(new java.awt.Color(102, 0, 0));
        Search.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("SEARCH");
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 380, -1, -1));

        jButton1.setBackground(new java.awt.Color(102, 0, 0));
        jButton1.setFont(new java.awt.Font("Perpetua", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 10, 70, 20));

        jLabel4.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Assist By:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 430, 90, -1));

        AssistFilter.setBackground(new java.awt.Color(102, 0, 0));
        AssistFilter.setFont(new java.awt.Font("Perpetua", 0, 14)); // NOI18N
        AssistFilter.setForeground(new java.awt.Color(255, 255, 255));
        AssistFilter.setText("Filter");
        AssistFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssistFilterActionPerformed(evt);
            }
        });
        getContentPane().add(AssistFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 90, -1));

        AssistTable.setBackground(new java.awt.Color(51, 0, 0));
        AssistTable.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        AssistTable.setForeground(new java.awt.Color(255, 255, 255));
        AssistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "First Name", "Last Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AssistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AssistTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(AssistTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 460, 470, 150));

        jLabel6.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Employee Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 620, 110, 30));

        jLabel8.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Time");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 660, 50, 30));

        EmployeeName.setBackground(new java.awt.Color(51, 0, 0));
        EmployeeName.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        EmployeeName.setForeground(new java.awt.Color(255, 255, 255));
        EmployeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeNameActionPerformed(evt);
            }
        });
        getContentPane().add(EmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 620, 250, 30));

        Time.setBackground(new java.awt.Color(51, 0, 0));
        Time.setFont(new java.awt.Font("Perpetua", 0, 18)); // NOI18N
        Time.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(Time, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 660, 250, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/462537887_580053814602662_2758245647023974022_n.png"))); // NOI18N
        jLabel9.setText("jLabel9");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 150, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backgroundLandscape2.jpg"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-150, -150, 1570, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FillterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillterActionPerformed
        try {
        String selectedCategory = (String)SpaComboBox.getSelectedItem();

        if (selectedCategory == null || selectedCategory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a category.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String query = "SELECT * FROM services WHERE ServicesName = ?";

        pst = con.prepareStatement(query);
        pst.setString(1, selectedCategory);  
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        int columnCount = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) ServicesTable.getModel();


        df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();

            row.add(rs.getString("Name"));
            row.add(rs.getBigDecimal("Price"));
           

            df.addRow(row);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching data from the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }                           
    }//GEN-LAST:event_FillterActionPerformed

    private void ServicesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ServicesTableMouseClicked
        int row = ServicesTable.getSelectedRow();
    if (row != -1) {
        String productName = ServicesTable.getValueAt(row, 0).toString();
        String productPrice = ServicesTable.getValueAt(row, 1).toString();
        ServiceName.setText(productName);
        ServicePrice.setText(productPrice);
    }
    }//GEN-LAST:event_ServicesTableMouseClicked
    double totalAmount = 0.0;
    private void AddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddMouseClicked
        // Get the name and price from the text fields
    String serviceName = ServiceName.getText();  // Assuming ServiceName is the text field for service name
    String servicePriceText = ServicePrice.getText();  // Assuming ServicePrice is the text field for service price
    String employeeName = EmployeeName.getText();  // Assuming EmployeeName is the text field for employee name
    String time = Time.getText();  // Assuming Time is the text field for service time
    
    // Validate the input
    if (serviceName.isEmpty() || servicePriceText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both service name and price.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Convert the price to a double
    double servicePrice;
    try {
        servicePrice = Double.parseDouble(servicePriceText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid price.", "Invalid Price", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Confirm with the user before proceeding with adding the service
    int option = JOptionPane.showConfirmDialog(this, 
                                               "Are you sure you want to add this service?", 
                                               "Add Service", 
                                               JOptionPane.YES_NO_OPTION, 
                                               JOptionPane.WARNING_MESSAGE);

    if (option == JOptionPane.NO_OPTION) {
        // If the user clicks "No", stop the process
        return;
    }

    // Create the service details text (including employee name and time)
    String serviceDetails = "Service Name: " + serviceName + "\n" +
                            "Service Price: " + servicePrice + "\n" +
                            "Employee Name: " + employeeName + "\n" +
                            "Service Time: " + time + "\n\n";
    
    // Append the service details to the ServicesTextArea
    ServicesTextArea.append(serviceDetails);
    
    // Add the service price to the total amount
    totalAmount += servicePrice;

    // Update the Total text field with the running total
    Total.setText("Total: " + totalAmount);  // Assuming Total is the text field for the total amount
    
    // Optional: Clear the text fields after adding
    ServiceName.setText("");  
    ServicePrice.setText("");
    EmployeeName.setText("");
    Time.setText("");
    
    // SQL query to insert the service into availservices table
    String query1 = "INSERT INTO availservices (servicename, serviceprice) VALUES (?, ?)";
    
    // SQL query to insert the service into the other table (replace "otherTable" with the actual table name)
    String query2 = "INSERT INTO availser (servicename, serviceprice) VALUES (?, ?)";
    
    String query3 = "INSERT INTO showbill (servicename, serviceprice, EmployeeName, Time) VALUES (?, ?, ?, ?)";
    
    try {
        // Start a transaction for both insert operations
        con.setAutoCommit(false);  // Disable auto-commit to handle both queries as a transaction

        // Insert into the first table (availservices)
        pst = con.prepareStatement(query1);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setDouble(2, servicePrice);  // Set the service price in the query
        
        int rowsAffected1 = pst.executeUpdate();

        // Insert into the second table (availser)
        pst = con.prepareStatement(query2);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setDouble(2, servicePrice);  // Set the service price in the query

        int rowsAffected2 = pst.executeUpdate();
        
        // Insert into the showbill table (with employee name and time)
        pst = con.prepareStatement(query3);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setDouble(2, servicePrice);  // Set the service price in the query
        pst.setString(3, employeeName);  // Set the employee name
        pst.setString(4, time);  // Set the time
        
        int rowsAffected3 = pst.executeUpdate();
        
        if (rowsAffected1 > 0 && rowsAffected2 > 0 && rowsAffected3 > 0) {
            // If all insertions are successful, commit the transaction
            con.commit();  
            JOptionPane.showMessageDialog(this, "Service added successfully to both tables!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // If insertion fails in any of the tables, rollback the transaction
            con.rollback();  
            JOptionPane.showMessageDialog(this, "Failed to add service to the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        try {
            if (con != null) {
                con.rollback();  // Rollback the transaction in case of any error
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            con.setAutoCommit(true);  // Restore auto-commit to its default state
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_AddMouseClicked

    private void availMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_availMouseClicked
        // Display a confirmation dialog to ask if the user is sure they want to avail the service
    int response = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to avail this service?", 
        "Confirm Service Availment", 
        JOptionPane.YES_NO_OPTION, 
        JOptionPane.QUESTION_MESSAGE);

    // If the user clicks 'Yes' (response == JOptionPane.YES_OPTION)
    if (response == JOptionPane.YES_OPTION) {
        // Proceed with opening the Confirmation JFrame
        Confirmation conf = new Confirmation();
        conf.setVisible(true);  // Show the Confirmation JFrame
        conf.pack();  // Adjust size
        conf.setLocationRelativeTo(null);  // Center the window
        conf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Close the application when the Confirmation JFrame is closed

        // Dispose of the current (this) JFrame to navigate away
        this.dispose();
    }
    }//GEN-LAST:event_availMouseClicked

    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
       // Get the service name from the input field
    String serviceName = ServiceName.getText().trim();  // Assuming ServiceName is the text field for service name
    
    // Validate that the service name is not empty
    if (serviceName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a service name to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // SQL query to search for the price, employee name, and time based on the service name
    String query = "SELECT serviceprice, EmployeeName, Time FROM showbill WHERE servicename = ?";
    
    try {
        // Prepare the SQL statement
        pst = con.prepareStatement(query);
        pst.setString(1, serviceName);  // Set the service name in the query
        
        // Execute the query and get the result
        rs = pst.executeQuery();
        
        // If a record is found
        if (rs.next()) {
            // Get the service price, employee name, and time from the result set
            double servicePrice = rs.getDouble("serviceprice");
            String employeeName = rs.getString("EmployeeName");
            String time = rs.getString("Time");
            
            // Display the data in the relevant text fields
            ServicePrice.setText(String.valueOf(servicePrice));  // Assuming ServicePrice is the text field for service price
            EmployeeName.setText(employeeName);  // Assuming EmployeeName is the text field for employee name
            Time.setText(time);  // Assuming Time is the text field for service time
            
            // Optional: Display a success message
            JOptionPane.showMessageDialog(this, "Service found! Price: " + servicePrice + 
                                                  "\nEmployee: " + employeeName + 
                                                  "\nTime: " + time, "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // If no matching service is found
            JOptionPane.showMessageDialog(this, "Service not found!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_SearchMouseClicked

    private void DeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseClicked
        // Get the service name and price from the input fields
    String serviceName = ServiceName.getText();  // Assuming ServiceName is the text field for service name
    String servicePrice = ServicePrice.getText();  // Assuming ServicePrice is the text field for service price  
    String employeeName = EmployeeName.getText();  // Assuming EmployeeName is the text field for employee name
    String time = Time.getText();  // Assuming Time is the text field for service time
    
    // Validate that the service name and price are not empty
    if (serviceName.isEmpty() || servicePrice.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both service name and price to delete.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Confirm with the user before proceeding with deletion
    int option = JOptionPane.showConfirmDialog(this, 
                                               "Are you sure you want to delete this service?", 
                                               "Delete Service", 
                                               JOptionPane.YES_NO_OPTION, 
                                               JOptionPane.WARNING_MESSAGE);

    if (option == JOptionPane.NO_OPTION) {
        // If the user clicks "No", stop the process
        return;
    }

    // SQL query to delete the service based on the service name and price from the first table (availservices)
    String query1 = "DELETE FROM availservices WHERE servicename = ? AND serviceprice = ?";
    
    // SQL query to delete the service from the second table (availser)
    String query2 = "DELETE FROM availser WHERE servicename = ? AND serviceprice = ?";
    
    // SQL query to delete from the showbill table (matching service name, price, employee name, and time)
    String query3 = "DELETE FROM showbill WHERE servicename = ? AND serviceprice = ? AND employeename = ? AND time = ?";

    try {
        // Prepare the SQL statement for the first table (availservices)
        pst = con.prepareStatement(query1);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setString(2, servicePrice); // Set the service price in the query
        
        // Execute the update (delete) in the first table
        int rowsAffected1 = pst.executeUpdate();
        
        // Prepare the SQL statement for the second table (availser)
        pst = con.prepareStatement(query2);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setString(2, servicePrice); // Set the service price in the query
        
        // Execute the update (delete) in the second table
        int rowsAffected2 = pst.executeUpdate();
        
        // Prepare the SQL statement for the showbill table (with employee name and time)
        pst = con.prepareStatement(query3);
        pst.setString(1, serviceName);  // Set the service name in the query
        pst.setString(2, servicePrice); // Set the service price in the query
        pst.setString(3, employeeName); // Set the employee name
        pst.setString(4, time);         // Set the time
        
        // Execute the update (delete) in the showbill table
        int rowsAffected3 = pst.executeUpdate();
        
        // Check if the service was deleted from all tables
        if (rowsAffected1 > 0 && rowsAffected2 > 0 && rowsAffected3 > 0) {
            // Service successfully deleted from all tables
            JOptionPane.showMessageDialog(this, "Service deleted successfully from all tables!", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Now delete the specific entry from ServicesTextArea
            String currentText = ServicesTextArea.getText(); // Get the current content of the TextArea
            
            // Split the current content by lines
            String[] lines = currentText.split("\n");
            StringBuilder updatedText = new StringBuilder();
            
            // Loop through each line and append it to the updatedText except the ones containing the service name, service price, employee name, and time
            boolean deleteFlag = false;
            for (int i = 0; i < lines.length; i++) {
                // Check if the current line contains the service name, service price, employee name, and time
                if (lines[i].contains("Service Name: " + serviceName) &&
                    lines[i + 1].contains("Service Price: " + servicePrice) &&
                    lines[i + 2].contains("Employee Name: " + employeeName) &&
                    lines[i + 3].contains("Service Time: " + time)) {
                    // Skip all 4 lines to delete this entry from ServicesTextArea
                    i += 3; // Skip the next 3 lines (Service Price, Employee Name, Service Time)
                    continue;
                }
                // Otherwise, add the line to the updatedText
                updatedText.append(lines[i]).append("\n");
            }
            
            // Set the updated content back to the ServicesTextArea
            ServicesTextArea.setText(updatedText.toString());
            
            // Recalculate the total amount after deletion
            double newTotal = 0.0;
            String[] updatedLines = updatedText.toString().split("\n");
            
            // Iterate through the updated lines to sum up the service prices
            for (int i = 0; i < updatedLines.length; i++) {
                // Check if the current line contains "Service Price: "
                if (updatedLines[i].contains("Service Price: ")) {
                    // Extract the price and add it to the total
                    String priceStr = updatedLines[i].replace("Service Price: ", "").trim();
                    try {
                        double price = Double.parseDouble(priceStr);
                        newTotal += price;
                    } catch (NumberFormatException e) {
                        // If the price is not a valid number, just ignore that line
                        continue;
                    }
                }
            }
            
            // Update the Total text field with the new total
            Total.setText(String.format("%.2f", newTotal));  // Assuming Total is the text field for total amount
        } else {
            // If no record was deleted (service name and price not found)
            JOptionPane.showMessageDialog(this, "Service not found!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Clear the input fields after deletion
        ServiceName.setText("");  // Clear the ServiceName text field
        ServicePrice.setText("");  // Clear the ServicePrice text field
        EmployeeName.setText("");  // Clear the EmployeeName text field
        Time.setText("");  // Clear the Time text field

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_DeleteMouseClicked

    private void ServicePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServicePriceActionPerformed
        ServicePrice.setEditable(false);
    }//GEN-LAST:event_ServicePriceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int close = JOptionPane.showConfirmDialog(null, "Are you sure you want to go back to the MAIN MENU?", "Confirmation Box", JOptionPane.YES_NO_OPTION);
    
        if (close == JOptionPane.YES_OPTION) {
            User usr = new User();
            usr.setVisible(true);
            usr.pack();
            usr.setLocationRelativeTo(null);
            usr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void AssistFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssistFilterActionPerformed
        try {
        String selectedCategory = (String)SpaComboBox.getSelectedItem();

        if (selectedCategory == null || selectedCategory.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a category.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String query = "SELECT * FROM employee WHERE Position = ?";

        pst = con.prepareStatement(query);
        pst.setString(1, selectedCategory);  
        rs = pst.executeQuery();
        ResultSetMetaData rss = rs.getMetaData();
        int columnCount = rss.getColumnCount();
        DefaultTableModel df = (DefaultTableModel) AssistTable.getModel();


        df.setRowCount(0);

        while (rs.next()) {
            Vector<Object> row = new Vector<>();

            row.add(rs.getString("FirstName"));
            row.add(rs.getString("LastName"));
           

            df.addRow(row);
        }
    } catch (SQLException ex) {
        Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(this, "Error fetching data from the database.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }         
    }//GEN-LAST:event_AssistFilterActionPerformed

    private void AssistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AssistTableMouseClicked
        int row = AssistTable.getSelectedRow();
    if (row != -1) {
        String firstname = AssistTable.getValueAt(row, 0).toString();
        String lastname = AssistTable.getValueAt(row, 1).toString();
        EmployeeName.setText(firstname + " " + lastname);

    }
    }//GEN-LAST:event_AssistTableMouseClicked

    private void EmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmployeeNameActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Services().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton AssistFilter;
    private javax.swing.JTable AssistTable;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField EmployeeName;
    private javax.swing.JButton Fillter;
    private javax.swing.JButton Search;
    private javax.swing.JTextField ServiceName;
    private javax.swing.JTextField ServicePrice;
    private javax.swing.JTable ServicesTable;
    private javax.swing.JTextArea ServicesTextArea;
    private javax.swing.JComboBox<String> SpaComboBox;
    private javax.swing.JTextField Time;
    private javax.swing.JLabel Total;
    private javax.swing.JButton avail;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
